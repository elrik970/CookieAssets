//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Player/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Normal"",
            ""id"": ""6a6c1420-0ab0-4be5-bf72-121997ccc6b9"",
            ""actions"": [
                {
                    ""name"": ""RunRightPress"",
                    ""type"": ""Button"",
                    ""id"": ""083995f4-5d25-4730-b4f7-89cd729a943e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RunRightRelease"",
                    ""type"": ""Button"",
                    ""id"": ""a3c65607-5991-4e55-ac9e-214acfae14b0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RunLeftPress"",
                    ""type"": ""Button"",
                    ""id"": ""59006861-5764-4ac2-94b9-66d92b0c613c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RunLeftRelease"",
                    ""type"": ""Button"",
                    ""id"": ""bdb2318f-9732-4d07-9128-686e5c4cb66e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpPress"",
                    ""type"": ""Button"",
                    ""id"": ""350629f8-805d-4128-8bec-97477df8f7ad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpRelease"",
                    ""type"": ""Button"",
                    ""id"": ""22905d2a-4e11-4dd1-bb27-e0dd12c54115"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""aca6df08-fbf5-4516-9ab5-4895ea80d20a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SlideLeftRelease"",
                    ""type"": ""Button"",
                    ""id"": ""df2984a9-a52b-426d-9646-e90e64e9b561"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SlideLeftClick"",
                    ""type"": ""Button"",
                    ""id"": ""fde0bd46-07b5-46b0-ab65-fa5751614fef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""03045fd7-be13-457d-ba87-d5aa834d5c6b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RunRightRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3d66683-1927-4d0f-b13d-174582c133be"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RunRightPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7c7cdb7-a57f-4116-a2b9-2d5c0589128e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RunLeftPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d10a64d0-3335-4487-a7f1-13c694803784"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RunLeftRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b834117-776a-4d9f-ad82-0f9711f165bd"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85ddc11a-8e9c-44de-a5c5-9c627b4fd6d6"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6bf1d7f1-c25e-4864-ba0c-51826a9e65e0"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""33d09fc9-b6f9-4a66-9503-91ad7b38272e"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SlideLeftRelease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""44cfbb94-1d9f-4115-b9d0-032bcbb7e1e0"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SlideLeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Normal
        m_Normal = asset.FindActionMap("Normal", throwIfNotFound: true);
        m_Normal_RunRightPress = m_Normal.FindAction("RunRightPress", throwIfNotFound: true);
        m_Normal_RunRightRelease = m_Normal.FindAction("RunRightRelease", throwIfNotFound: true);
        m_Normal_RunLeftPress = m_Normal.FindAction("RunLeftPress", throwIfNotFound: true);
        m_Normal_RunLeftRelease = m_Normal.FindAction("RunLeftRelease", throwIfNotFound: true);
        m_Normal_JumpPress = m_Normal.FindAction("JumpPress", throwIfNotFound: true);
        m_Normal_JumpRelease = m_Normal.FindAction("JumpRelease", throwIfNotFound: true);
        m_Normal_Dash = m_Normal.FindAction("Dash", throwIfNotFound: true);
        m_Normal_SlideLeftRelease = m_Normal.FindAction("SlideLeftRelease", throwIfNotFound: true);
        m_Normal_SlideLeftClick = m_Normal.FindAction("SlideLeftClick", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Normal
    private readonly InputActionMap m_Normal;
    private List<INormalActions> m_NormalActionsCallbackInterfaces = new List<INormalActions>();
    private readonly InputAction m_Normal_RunRightPress;
    private readonly InputAction m_Normal_RunRightRelease;
    private readonly InputAction m_Normal_RunLeftPress;
    private readonly InputAction m_Normal_RunLeftRelease;
    private readonly InputAction m_Normal_JumpPress;
    private readonly InputAction m_Normal_JumpRelease;
    private readonly InputAction m_Normal_Dash;
    private readonly InputAction m_Normal_SlideLeftRelease;
    private readonly InputAction m_Normal_SlideLeftClick;
    public struct NormalActions
    {
        private @PlayerInputs m_Wrapper;
        public NormalActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @RunRightPress => m_Wrapper.m_Normal_RunRightPress;
        public InputAction @RunRightRelease => m_Wrapper.m_Normal_RunRightRelease;
        public InputAction @RunLeftPress => m_Wrapper.m_Normal_RunLeftPress;
        public InputAction @RunLeftRelease => m_Wrapper.m_Normal_RunLeftRelease;
        public InputAction @JumpPress => m_Wrapper.m_Normal_JumpPress;
        public InputAction @JumpRelease => m_Wrapper.m_Normal_JumpRelease;
        public InputAction @Dash => m_Wrapper.m_Normal_Dash;
        public InputAction @SlideLeftRelease => m_Wrapper.m_Normal_SlideLeftRelease;
        public InputAction @SlideLeftClick => m_Wrapper.m_Normal_SlideLeftClick;
        public InputActionMap Get() { return m_Wrapper.m_Normal; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(NormalActions set) { return set.Get(); }
        public void AddCallbacks(INormalActions instance)
        {
            if (instance == null || m_Wrapper.m_NormalActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_NormalActionsCallbackInterfaces.Add(instance);
            @RunRightPress.started += instance.OnRunRightPress;
            @RunRightPress.performed += instance.OnRunRightPress;
            @RunRightPress.canceled += instance.OnRunRightPress;
            @RunRightRelease.started += instance.OnRunRightRelease;
            @RunRightRelease.performed += instance.OnRunRightRelease;
            @RunRightRelease.canceled += instance.OnRunRightRelease;
            @RunLeftPress.started += instance.OnRunLeftPress;
            @RunLeftPress.performed += instance.OnRunLeftPress;
            @RunLeftPress.canceled += instance.OnRunLeftPress;
            @RunLeftRelease.started += instance.OnRunLeftRelease;
            @RunLeftRelease.performed += instance.OnRunLeftRelease;
            @RunLeftRelease.canceled += instance.OnRunLeftRelease;
            @JumpPress.started += instance.OnJumpPress;
            @JumpPress.performed += instance.OnJumpPress;
            @JumpPress.canceled += instance.OnJumpPress;
            @JumpRelease.started += instance.OnJumpRelease;
            @JumpRelease.performed += instance.OnJumpRelease;
            @JumpRelease.canceled += instance.OnJumpRelease;
            @Dash.started += instance.OnDash;
            @Dash.performed += instance.OnDash;
            @Dash.canceled += instance.OnDash;
            @SlideLeftRelease.started += instance.OnSlideLeftRelease;
            @SlideLeftRelease.performed += instance.OnSlideLeftRelease;
            @SlideLeftRelease.canceled += instance.OnSlideLeftRelease;
            @SlideLeftClick.started += instance.OnSlideLeftClick;
            @SlideLeftClick.performed += instance.OnSlideLeftClick;
            @SlideLeftClick.canceled += instance.OnSlideLeftClick;
        }

        private void UnregisterCallbacks(INormalActions instance)
        {
            @RunRightPress.started -= instance.OnRunRightPress;
            @RunRightPress.performed -= instance.OnRunRightPress;
            @RunRightPress.canceled -= instance.OnRunRightPress;
            @RunRightRelease.started -= instance.OnRunRightRelease;
            @RunRightRelease.performed -= instance.OnRunRightRelease;
            @RunRightRelease.canceled -= instance.OnRunRightRelease;
            @RunLeftPress.started -= instance.OnRunLeftPress;
            @RunLeftPress.performed -= instance.OnRunLeftPress;
            @RunLeftPress.canceled -= instance.OnRunLeftPress;
            @RunLeftRelease.started -= instance.OnRunLeftRelease;
            @RunLeftRelease.performed -= instance.OnRunLeftRelease;
            @RunLeftRelease.canceled -= instance.OnRunLeftRelease;
            @JumpPress.started -= instance.OnJumpPress;
            @JumpPress.performed -= instance.OnJumpPress;
            @JumpPress.canceled -= instance.OnJumpPress;
            @JumpRelease.started -= instance.OnJumpRelease;
            @JumpRelease.performed -= instance.OnJumpRelease;
            @JumpRelease.canceled -= instance.OnJumpRelease;
            @Dash.started -= instance.OnDash;
            @Dash.performed -= instance.OnDash;
            @Dash.canceled -= instance.OnDash;
            @SlideLeftRelease.started -= instance.OnSlideLeftRelease;
            @SlideLeftRelease.performed -= instance.OnSlideLeftRelease;
            @SlideLeftRelease.canceled -= instance.OnSlideLeftRelease;
            @SlideLeftClick.started -= instance.OnSlideLeftClick;
            @SlideLeftClick.performed -= instance.OnSlideLeftClick;
            @SlideLeftClick.canceled -= instance.OnSlideLeftClick;
        }

        public void RemoveCallbacks(INormalActions instance)
        {
            if (m_Wrapper.m_NormalActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(INormalActions instance)
        {
            foreach (var item in m_Wrapper.m_NormalActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_NormalActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public NormalActions @Normal => new NormalActions(this);
    public interface INormalActions
    {
        void OnRunRightPress(InputAction.CallbackContext context);
        void OnRunRightRelease(InputAction.CallbackContext context);
        void OnRunLeftPress(InputAction.CallbackContext context);
        void OnRunLeftRelease(InputAction.CallbackContext context);
        void OnJumpPress(InputAction.CallbackContext context);
        void OnJumpRelease(InputAction.CallbackContext context);
        void OnDash(InputAction.CallbackContext context);
        void OnSlideLeftRelease(InputAction.CallbackContext context);
        void OnSlideLeftClick(InputAction.CallbackContext context);
    }
}
